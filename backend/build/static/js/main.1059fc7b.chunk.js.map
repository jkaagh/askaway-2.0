{"version":3,"sources":["components/PreviousRoom.js","components/CookieLaw.js","components/Home.js","components/Poll.js","components/Room.js","assets/hammer.svg","components/CreatePoll.js","components/HostPoll.js","components/Host.js","components/ReadMore.js","components/Analytics.js","App.js","index.js","components/serverAdress.js"],"names":["PreviousRoom","prevRoomCookie","history","useHistory","useState","data","setData","useEffect","undefined","cookie","load","className","onClick","handleJoin","push","CookieLaw","show","setShow","handleClose","d","Date","time","getTime","console","log","document","Modal","onHide","Header","Title","Body","Footer","Button","variant","Home","captcha","inputValue","setInputValue","createText","setCreateText","joinText","setJoinText","captchaValue","setCaptchaValue","captchaWarning","setCaptchaWarning","existingPassword","Axios","post","address","room","then","response","success","reset","msg","newPassword","roomId","userId","href","id","onChange","e","target","value","toUpperCase","onKeyPress","key","type","placeholder","name","sitekey","ref","r","setCaptchaRef","roomCreated","adminPassword","Poll","props","showPoll","setShowPoll","pollTitle","setPollTitle","pollData","setPollData","totalVotes","setTotalVotes","selected","setSelected","setToBeSelected","socketRef","useRef","current","io","connect","password","emit","on","parentFunction","window","location","reload","number","forEach","item","map","index","enableBorder","Math","round","style","background","choice","handleSubmit","option","Room","match","params","setUserId","message","setMessage","classList","setClassList","canPost","setCanPost","displayPoll","setDisplayPoll","handlePost","setTimeout","question","preventDefault","rows","maxLength","update","newInput","setNewInput","messageClass","SetMessageClass","onPost","handleAddNew","length","newData","entry","width","tabIndex","i","splice","handleDelete","viewBox","x","y","height","fill","stop","userToBan","setUserToBan","didPost","setDidPost","questionList","newQuestion","oldArray","handleShow","alt","src","BanHammer","HostPoll","CreatePoll","ReadMore","Admin","setPassword","analData","setAnalData","allowed","setAllowed","resetCaptcha","rooms","questions","users","toFixed","App","exact","path","component","Host","Analytics","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1059fc7b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport cookie from 'react-cookies'\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nexport default function PreviousRoom() {\r\n    let history = useHistory();\r\n    let prevRoomCookie\r\n    const [data, setData] = useState()\r\n    \r\n    \r\n    useEffect(() => {\r\n        prevRoomCookie = cookie.load(\"PreviousRoom\")\r\n        if(prevRoomCookie === undefined){\r\n            return null\r\n        }\r\n        else{\r\n            setData(\r\n                <div>\r\n                    <div className=\"container\">\r\n                        <p className=\"mt-4 mb-0\">\r\n                            It looks like you already created room {prevRoomCookie}\r\n                        </p>\r\n                        <button onClick={handleJoin} className=\"btn btn-link alert-link\">Join {prevRoomCookie} as host</button>\r\n           \r\n                    </div>\r\n                </div>\r\n            )\r\n            return ( //where does this return to?\r\n                <div className=\"bg-danger\">\r\n                    ass\r\n                </div>\r\n            )\r\n        }\r\n    }, [])\r\n\r\n    const handleJoin = () => {\r\n        history.push(\"/host/\" + prevRoomCookie + \"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {data}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport cookie from 'react-cookies'\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nexport default function CookieLaw() {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        // let date = new Date()\r\n        // let time = (Math.floor(new Date().getTime()/1000.0) + (60 * 60 * 24 * 365 * 10))\r\n        // let d = new Date(time)\r\n        // console.log(time)\r\n\r\n        let d = new Date();\r\n        let time = d.getTime()\r\n        let tomorrow = time + 900000000000\r\n        d = new Date(tomorrow);\r\n        console.log(d)\r\n\r\n        document.cookie = \"AskawayCookiesAllowed=true; expires=\" + d + \"\"\r\n    } \r\n        \r\n    \r\n\r\n    useEffect(() => {\r\n        if(cookie.load(\"AskawayCookiesAllowed\") == null){\r\n            \r\n            setShow(true)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n\t\t<div>\r\n\t\t\t<Modal show={show} onHide={handleClose}>\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<Modal.Title>This site uses cookies.</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n                By continuing to use this site, you consent to using the following cookies:\r\n                <li>\r\n                    reCaptcha cookies by Google\r\n                </li>\r\n                <li>\r\n                    Cookies by Askaway for running the site optimally.\r\n                </li>\r\n                \r\n                \r\n                </Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<Button onClick={handleClose} variant=\"primary\">Okay</Button>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t);\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Axios from \"axios\"\r\nimport ReCaptcha from \"react-google-recaptcha\"\r\nimport cookie from 'react-cookies'\r\nimport PreviousRoom from \"./PreviousRoom\"\r\nimport CookieLaw from \"./CookieLaw\"\r\nimport {address} from \"./serverAdress\"\r\n\r\n\r\nexport default function Home() {\r\n\r\n \r\n\r\n    let history = useHistory();\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [createText, setCreateText] = useState(\"Or create a room...\")\r\n    const [joinText, setJoinText] = useState(\"Join\")\r\n    const [captchaValue, setCaptchaValue] = useState()\r\n    const [captchaWarning, setCaptchaWarning] = useState()\r\n\r\n    \r\n\r\n    //this entire thing is just for clicking enter to fire a function\r\n\r\n\r\n    const handleChange = (target) => {\r\n        setInputValue(target.toUpperCase())\r\n        \r\n    }\r\n\r\n    let captcha;\r\n    \r\n    const setCaptchaRef = (ref) => {\r\n        if(ref){\r\n            return captcha = ref;\r\n        }\r\n    }\r\n\r\n    const handleCreate = () => {\r\n        setCreateText(\"Loading...\")\r\n\r\n        Axios.post(address + \"/createroom\", { captcha: captchaValue, })\r\n            .then((response) => {\r\n                if (response.data.success === false) {\r\n                     //when this runs the captcha will have been used and must be resubmitted, therefore run reset:\r\n                     captcha.reset()\r\n                     setCaptchaWarning(response.data.msg)\r\n                     setCreateText(\"Or create a room...  \")\r\n                }\r\n                setCaptchaValue(\"ass\")\r\n                \r\n                if (response.data.roomCreated === true) {\r\n                    let d = new Date();\r\n                    let time = d.getTime()\r\n                    let tomorrow = time + 86400000 // + 24 hours\r\n                    d = new Date(tomorrow);\r\n\r\n                    document.cookie = \"adminPassword\" + response.data.roomId + \"=\" + response.data.adminPassword + \"; expires=\" + d + \"\"\r\n                    document.cookie = \"PreviousRoom=\" + response.data.roomId + \"; expires=\" + d + \"\"\r\n                    history.push(\"/host/\" + response.data.roomId + \"\")\r\n\r\n                }\r\n            \r\n\r\n\r\n                //redirect to subpage todo\r\n            })\r\n    }\r\n    \r\n\r\n    const handleJoin = () => {\r\n        setJoinText(\"Loading...\");\r\n        let existingPassword = cookie.load(\"userPassword\" + inputValue + \"\");\r\n        // console.log(existingPassword)\r\n        console.log(inputValue)\r\n        Axios.post(address + \"/joinroom\", { captcha: captchaValue, existingPassword: existingPassword, room: inputValue })\r\n        // Axios.post(\"https://askawayapp.herokuapp.com/joinroom\", { captcha: captchaValue, existingPassword: existingPassword, room: inputValue })\r\n            .then((response) => {\r\n                console.log(response.data)\r\n                if (response.data.success === false) {\r\n                    \r\n                    //when this runs the captcha will have been used and must be resubmitted, therefore run reset:\r\n                    captcha.reset()\r\n                    setCaptchaWarning(response.data.msg)\r\n                    setJoinText(\"Join\")\r\n                            \r\n                }\r\n                            \r\n                if (response.data.newPassword !== undefined) { //this runs if user sent wrong or no password\r\n                    let d = new Date();\r\n                    let time = d.getTime()\r\n                    let tomorrow = time + 86400000 // + 24 hours\r\n                    d = new Date(tomorrow);\r\n\r\n                    document.cookie = \"userPassword\" + response.data.roomId + \"=\" + response.data.newPassword + \"; expires=\" + d + \"\"\r\n                    document.cookie = \"userId\" + response.data.roomId + \"=\" + response.data.userId + \"; expires=\" + d + \"\"\r\n                }\r\n                if (response.data.success === true) {\r\n                    history.push(\"/room/\" + response.data.roomId + \"\")\r\n                }\r\n\r\n\r\n            })\r\n    }\r\n\r\n    //save captcha value to post into server\r\n    const handleCaptcha = (value) => {\r\n        setCaptchaValue(value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container text-center \">\r\n            <div className=\"container pb-4\">\r\n                <h1 className=\"display-3 d-none d-sm-inline text-wrap\">Askaway</h1>\r\n                <h1 className=\"display-4 d-sm-none text-wrap\">Askaway</h1>\r\n\r\n                <h4 className=\"\">The free service that lets you ask anonymous questions live.</h4>\r\n                <a href=\"readmore\" id=\"\" className=\"alert-link\">Read more</a>\r\n\r\n            </div>\r\n\r\n        \r\n\r\n\r\n\r\n            <div className=\"container w-sm-50\">\r\n                <input \r\n                onChange={(e) => handleChange(e.target.value)}\r\n                onKeyPress={(e) => {\r\n                    if(e.key === \"Enter\"){\r\n                        handleJoin()\r\n                        \r\n                    }\r\n                }} \r\n                value={inputValue} id=\"codeInput\" \r\n                className=\"form-control text-center customInput\" \r\n                type=\"text\" placeholder=\"Type room code here to join\" \r\n                name=\"askawayInput\" \r\n                />\r\n               \r\n                <div className=\"container d-flex flex-wrap justify-content-center mt-4\">\r\n                    <ReCaptcha\r\n                        sitekey=\"6LdqX4saAAAAAC3Cie6ilnn6ujzvKuiMm2tjYeWG\"\r\n                        onChange={handleCaptcha}\r\n                        ref={(r) => setCaptchaRef(r)}\r\n                        \r\n                    /> \r\n\r\n                </div>\r\n                <span className=\"text-danger d-block\">\r\n                    {captchaWarning}\r\n                </span>\r\n\r\n                <button onClick={handleJoin} className=\" btn btn-primary px-4 m-4 customButton\">{joinText}</button>\r\n\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                {/* <Link to={\"/room/\" + }> */}\r\n                <button onClick={handleCreate} className=\"btn btn-link alert-link \">{createText}</button>\r\n                {/* </Link> */}\r\n            </div>\r\n\r\n            <PreviousRoom />\r\n            <CookieLaw/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react'\r\nimport cookie from 'react-cookies'  \r\nimport {io} from \"socket.io-client\"\r\nimport {address} from \"./serverAdress\"\r\n\r\nexport default function Poll(props) {\r\n\r\n    const [showPoll, setShowPoll] = useState(false) \r\n    const [pollTitle, setPollTitle] = useState(\"\")\r\n    const [pollData, setPollData] = useState([])\r\n    const [totalVotes, setTotalVotes] = useState(0);\r\n    const [selected, setSelected] = useState(-1); \r\n    const [toBeSelected, setToBeSelected] = useState()\r\n\r\n     //socketio stuff\r\n     const socketRef = useRef()\r\n\r\n     useEffect(() => {\r\n         //connect to the server\r\n         socketRef.current = io.connect(address); \r\n\r\n\r\n         let password = cookie.load(\"userPassword\" + props.roomId + \"\")\r\n         socketRef.current.emit(\"setSocketId\", {password: password})\r\n         //sends nothing to the server \r\n         //to let the server know this client is part the room, with socketId.\r\n \r\n         socketRef.current.on(\"SendPoll\", (data) => {\r\n\r\n            if(data.pollData != undefined){\r\n                setPollData(data.pollData)\r\n            }\r\n\r\n            if(data.selected != undefined){\r\n                setSelected(data.selected)\r\n            }\r\n\r\n            if(data.pollTitle != undefined){\r\n                setShowPoll(true)\r\n                setPollTitle(data.pollTitle)\r\n                props.parentFunction()\r\n            }\r\n            \r\n        })\r\n\r\n        \r\n\r\n        //in case device disconnects, such as when a phone leaves?/closes a browser or closing your laptop.\r\n        socketRef.current.on(\"disconnect\", () => {\r\n            window.location.reload(true)\r\n        })\r\n\r\n     }, [])\r\n\r\n    useEffect(() => { //this runs every time new polldata is recieved.\r\n       let number = 0;\r\n       pollData.forEach((item) => {\r\n           number = item.value + number\r\n       })  \r\n       setTotalVotes(number);\r\n    }, [pollData])\r\n\r\n    const handleSubmit = (index) => {\r\n        let password = cookie.load(\"userPassword\" + props.roomId + \"\")\r\n        socketRef.current.emit(\"sendPollAnswer\", {choice: index, password: password})\r\n        setToBeSelected(index)\r\n\r\n    }\r\n    return (\r\n        <div className=\"\">\r\n            { showPoll &&\r\n                <div>\r\n                    <h4 className=\" text-center m-auto\">{pollTitle}</h4>\r\n                    {pollData && pollData.map((item, index) => {\r\n                        {/* console.log(item.value, totalVotes) */}\r\n                        let number = Math.round(item.value / totalVotes * 100)\r\n                        {/* if(number == 99){\r\n                            number = 100;   \r\n                        } */}\r\n                        if(totalVotes == 0){\r\n                            number = 0;\r\n                        }\r\n                        let enableBorder;\r\n                        if(index === selected){\r\n                            enableBorder = \"border-primary\"\r\n                        }\r\n\r\n                        return(\r\n                            <div key={index} className=\"mb-1\">\r\n                                <div \r\n                                className={\"border rounded p-1 \" + enableBorder} \r\n                                style={{background: \"linear-gradient(90deg, rgba(181,181,181,0.3) \" + number + \"%, rgba(255,0,10,0) \" + number + \"%)\"}}\r\n                                onClick={() => {handleSubmit(index)}}\r\n                                >\r\n\r\n                                   \r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-9 text-start\">\r\n                                            {item.option}\r\n                                        </div>\r\n                                        <div className=\"col-3 text-end\">\r\n\r\n                                           {number}%\r\n                                            \r\n                                        </div>\r\n                                    </div>\r\n                                   \r\n                                </div>\r\n                                \r\n                            </div>\r\n                        )\r\n                    })\r\n                        \r\n                    }\r\n                </div>\r\n            }\r\n\r\n            \r\n           \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react'\r\nimport cookie from 'react-cookies'  \r\nimport {io} from \"socket.io-client\"\r\nimport CookieLaw from './CookieLaw';\r\nimport {address} from \"./serverAdress\"\r\nimport Poll from \"./Poll\"\r\n\r\n//as soon as i load the room, check for user and admin password. do server calls dependant on which one i find.\r\n//user only posts, admin can also request from server.\r\nexport default function Room(props) {\r\n\r\n    \r\n    \r\n\r\n    const [roomId] = useState(props.match.params.id);\r\n    const [userId, setUserId] = useState()\r\n    const [message, setMessage] = useState(\"\")\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [classList, setClassList] = useState(\"\")\r\n    const [canPost, setCanPost] = useState(true)\r\n    const [showPoll, setShowPoll] = useState()\r\n    const [displayPoll, setDisplayPoll] = useState(\"d-none\")\r\n\r\n    const enablePoll = () => {\r\n        setShowPoll(\"col-md-8\")\r\n        setDisplayPoll(\"\")\r\n    }\r\n    useEffect(() => {\r\n        setUserId(cookie.load(\"userId\" + roomId + \"\"))\r\n        \r\n    }, [])\r\n\r\n\r\n    //socketio stuff\r\n    const socketRef = useRef()\r\n\r\n    useEffect(() => {\r\n\t\t//connect to the server\r\n\t\tsocketRef.current = io.connect(address); \r\n\t\t// socketRef.current.emit\r\n\t\tsocketRef.current.on(\"RoomMessage\", ({ msg, success }) => {\r\n\t\t\tif (success === false) {\r\n                setClassList(\"text-danger d-block\")\r\n\t\t\t\tsetMessage(msg);\r\n\t\t\t} else {\r\n                setInputValue(\"\");\r\n                setClassList(\"text-primary d-block\")\r\n                setMessage(msg)\r\n            }\r\n\r\n\t\t});\r\n\t}, [])\r\n\r\n\r\n\r\n    const handlePost = () => {\r\n        \r\n        if(canPost) {\r\n\r\n            setCanPost(false)\r\n\r\n            //set timer\r\n            setTimeout(() =>{\r\n\r\n                setCanPost(true)\r\n            }, 3000)\r\n        }\r\n        else{\r\n            setClassList(\"text-danger d-block\")\r\n\t\t\t\tsetMessage(\"You can't post more than once every 3 seconds.\");\r\n                return\r\n        }\r\n       \r\n\r\n        let password = cookie.load(\"userPassword\" + roomId + \"\")\r\n        \r\n        socketRef.current.emit(\"postQuestion\", {password: password, roomId: roomId, question: inputValue })\r\n\r\n       \r\n\r\n        // Axios.post(\"http://localhost:3001/postquestion/\", {password: password, roomId: roomId, question: inputValue })\r\n        // .then((response) =>{\r\n        //     console.log(response.data)\r\n        //     if(response.data.success === false){\r\n        //         setMessage(response.data.msg)\r\n        //     }\r\n        //     else{\r\n        //         setInputValue(\"\")\r\n        //     }\r\n        // })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container text-center\" id=\"QuestionsContainer\">\r\n            <div className=\"container\">\r\n                <h3 className=\"pt-4\">Room Code: <u>{roomId}</u></h3>\r\n                <h4 className=\"pb-4\">Your ID: <u>{userId}</u></h4>\r\n                    <div className=\"row\">\r\n                        <div className={\"container-fluid border-right p-4 col-12 \" + showPoll}>\r\n                        <textarea \r\n                        onChange={(e) => setInputValue(e.target.value)} \r\n                        onKeyPress={(e) => {\r\n                            if(e.key === \"Enter\"){\r\n                                handlePost()\r\n                                e.preventDefault();\r\n                            }\r\n                        }} \r\n                        value={inputValue} \r\n                        type=\"text\" \r\n                        rows=\"5\" \r\n                        maxLength=\"200\" \r\n                        className=\"customInput form-control \" \r\n                        placeholder=\"Type your question here\"   \r\n                        />\r\n                    \r\n                        <span className={classList}>\r\n                            {message}\r\n                        </span>\r\n\r\n                        <button onClick={handlePost} id=\"btnAskQuestion\" className=\"btn btn-outline-primary mt-3 px-4\" type=\"button\">Ask away!</button>\r\n                    </div>\r\n                   \r\n                    <div className={ \"container-fluid border-start p-4 col-12 col-md-4 order-first order-md-last \" + displayPoll}>\r\n                        <Poll roomId={roomId} parentFunction={enablePoll}/>\r\n                        \r\n                    </div>\r\n                \r\n                </div>\r\n\r\n\r\n\r\n            \r\n            </div>\r\n            <CookieLaw/>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/hammer.a1387783.svg\";","import React, {useState, useEffect, useRef} from \"react\"\r\nimport Axios from \"axios\"\r\nimport {io} from \"socket.io-client\"\r\nimport {address} from \"./serverAdress\"\r\nimport cookie from 'react-cookies'\r\n\r\nexport default function (props) {\r\n    \r\n    const [pollData, setPollData] = useState(\r\n        [\r\n            \"\",\r\n            \"\"\r\n        ]\r\n    )\r\n\r\n    const [pollTitle, setPollTitle]         = useState(\"\")\r\n    const [, update]                        = useState()\r\n    const [newInput, setNewInput]           = useState(\"\")\r\n    const [pollInfo, setPollInfo]           = useState(\"d-none\")\r\n    const [message, setMessage]             = useState()\r\n    const [messageClass, SetMessageClass]   = useState()\r\n    \r\n\r\n    \r\n    \r\n    const socketRef = useRef()\r\n\r\n    useEffect(() => {\r\n\t\t//connect to the server\r\n\t\t \r\n\t\tsocketRef.current = io.connect(address); \r\n\t\t// socketRef.current.emit\r\n\t\tsocketRef.current.on(\"pollUpdate\", ({data}) => {\r\n\t\r\n            //respond to new answers here\r\n\t\t});\r\n\r\n        socketRef.current.on(\"message\", (data) => {\r\n            // console.log(data)\r\n            \r\n            if(data.success !== true){\r\n                \r\n                setMessage(data.msg)\r\n                SetMessageClass(\"text-danger\")\r\n                return\r\n            }\r\n            console.log(\"asd\")\r\n            props.onPost()\r\n\r\n        })\r\n\r\n       \r\n\t}, [])\r\n\r\n    const handleDelete = (i) => {\r\n        if(pollData.length < 3){\r\n            setMessage(\"You need at least 2 options.\")\r\n            SetMessageClass(\"text-danger\")\r\n            return \r\n        }\r\n        let newData = pollData\r\n        newData.splice(i, 1)\r\n        setPollData(newData)\r\n        console.log(pollData)\r\n        update({})\r\n    }\r\n\r\n    const handleAddNew = () => {\r\n        if(newInput == \"\"){\r\n            return;\r\n        }\r\n        if(pollData.length > 9){\r\n            setMessage(\"You can max have 10 options.\")\r\n            SetMessageClass(\"text-danger\")\r\n            return \r\n        }\r\n        let newData = pollData;\r\n        newData.push(newInput);\r\n        setPollData(newData)\r\n        setNewInput(\"\")\r\n        console.log(pollData)\r\n    }\r\n\r\n    const handlePost = () =>{\r\n        //frontend validation:\r\n        let stop\r\n\r\n        if(pollTitle == \"\" || pollTitle == undefined){\r\n            setMessage(\"You must have a title.\")\r\n            SetMessageClass(\"text-danger\")\r\n            stop = true\r\n            return\r\n        }\r\n\r\n        pollData.forEach((option) => {\r\n            if(option == \"\"){\r\n                setMessage(\"No options can be empty.\")\r\n                SetMessageClass(\"text-danger\")\r\n                stop = true\r\n                return\r\n            }\r\n           \r\n        })\r\n        \r\n        if(stop) return\r\n        props.onPost()\r\n        \r\n        socketRef.current.emit(\"postPoll\", {pollData: pollData, pollTitle: pollTitle, password: cookie.load(\"adminPassword\" + props.roomId + \"\"), })\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return(\r\n        <div className=\"\">\r\n            <h4 className=\" text-center m-auto\">Create poll</h4>\r\n            <p className=\"text-center\">\r\n                Create an anonymous poll for everyone to vote\r\n            </p>\r\n            <input className=\"form-control fw-bold\" placeholder=\"Poll title\" maxLength=\"50\" onChange={(e) => {setPollTitle(e.target.value)}}></input>\r\n            {\r\n                pollData && pollData.map((entry, index) => {\r\n                    return(\r\n                        <div className=\"input-group my-2\" key={index}>   \r\n                            <input placeholder={\"Option \" + (index +1)  } maxLength=\"50\" className=\"form-control\" value={entry}  onChange={(e) => {\r\n                               \r\n                                // setPollData(pollData => pollData[index] = \"test\" ) \r\n                               \r\n                                \r\n                                let newData = [...pollData]\r\n                               \r\n                                newData[index] = e.target.value\r\n                                setPollData(newData)\r\n                                \r\n                                \r\n                            }}></input>\r\n                            <button style={{width: \"38px\"}} tabIndex=\"-1\" className=\"btn btn-outline-danger\" onClick={\r\n                                () => handleDelete(index)\r\n                            }>\r\n                                X\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                })\r\n\r\n            }\r\n            <div className=\"input-group mb-2\">   \r\n\r\n                <input placeholder=\"Add new\" className=\"form-control\" \r\n                onChange={(e) => {setNewInput(e.target.value)}} \r\n                onKeyPress={(e) => {\r\n                    if(e.key === \"Enter\"){\r\n                        handleAddNew()\r\n                    }\r\n                }}\r\n                value={newInput}\r\n                ></input>\r\n\r\n                <button style={{width: \"38px\"}} tabIndex=\"-1\" className=\"btn btn-outline-primary p-0\" onClick={handleAddNew}>\r\n                   \r\n                    <svg  viewBox=\"0 0 40 40\">\r\n                        <rect\r\n                        x=\"19\" y=\"14\" // 12 px (+2 because not pixel perfect???)\r\n                        width=\"2\" height=\"12\"\r\n                        fill=\"currentColor\"\r\n                        />\r\n                        <rect\r\n                        x=\"14\" y=\"19\"\r\n                        width=\"12\" height=\"2\"\r\n                        fill=\"currentColor\"\r\n                        />\r\n                    </svg>\r\n                </button>\r\n\r\n            </div>\r\n\r\n            <div className={\"text-center \" + messageClass}>\r\n                {message}\r\n            </div>\r\n            \r\n            <div className=\"text-center\">\r\n                <button onClick={handlePost} id=\"btnAskQuestion\" className=\"btn btn-outline-primary mt-3 px-4\" type=\"button\">Publish!</button>\r\n            </div>\r\n\r\n            {/* <button onClick={() => {}}>asd</button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState, useEffect, useRef} from \"react\"\r\nimport {io} from \"socket.io-client\"\r\nimport {address} from \"./serverAdress\"\r\nimport cookie from 'react-cookies'\r\n\r\nexport default function (props) {\r\n\r\n\r\n    const [totalVotes, setTotalVotes] = useState(0);\r\n\r\n\r\n\r\n     //socketio stuff\r\n     const socketRef = useRef()\r\n\r\n     useEffect(() => {\r\n         //connect to the server\r\n         socketRef.current = io.connect(address); \r\n\r\n\r\n         let password = cookie.load(\"AdminPassword\" + props.roomId + \"\")\r\n         socketRef.current.emit(\"setSocketIdHost\", {password: password})\r\n         //sends nothing to the server \r\n         //to let the server know this client is part the room, with socketId.\r\n \r\n         \r\n         \r\n     }, [])\r\n\r\n     useEffect(() => { //this runs every time new polldata is recieved.\r\n        if(props.pollData === undefined) return\r\n        let number = 0;\r\n        props.pollData.forEach((item) => {\r\n            number = item.value + number\r\n        })  \r\n        setTotalVotes(number);\r\n     }, [props.pollData])\r\n \r\n     \r\n\r\n    return(\r\n        <div>\r\n        \r\n        \r\n        {props.pollData != undefined &&\r\n            <div>\r\n                <h4 className=\" text-center m-auto\">{props.pollTitle}</h4>\r\n                {props.pollData && props.pollData.map((item, index) => {\r\n                        // console.log(item.value, totalVotes)\r\n                        let number = Math.round(item.value / totalVotes * 100)\r\n                        {/* if(number == 99){\r\n                            number = 100;   \r\n                        } */}\r\n                        if(totalVotes == 0){\r\n                            number = 0;\r\n                        }\r\n                        let enableBorder;\r\n                        if(index === props.selected){\r\n                            enableBorder = \"border-primary\"\r\n                        }\r\n\r\n                        return(\r\n                            <div key={index} className=\"mb-1\">\r\n                                <div \r\n                                className={\"border rounded p-1 \" + enableBorder} \r\n                                style={{background: \"linear-gradient(90deg, rgba(181,181,181,0.3) \" + number + \"%, rgba(255,0,10,0) \" + number + \"%)\"}}\r\n                                onClick={() => {props.handleSubmit(index)}}\r\n                                >                                  \r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-9 text-start\">\r\n                                            {item.option}\r\n                                        </div>\r\n                                        <div className=\"col-3 text-end\">\r\n\r\n                                           {number}%\r\n                                            \r\n                                        </div>\r\n                                    </div>\r\n                                   \r\n                                </div>\r\n                                \r\n                            </div>\r\n                        )\r\n                    })\r\n                        \r\n                    }\r\n            </div>\r\n        }\r\n        </div>\r\n        \r\n    )\r\n}","import React, {useState, useEffect, useRef} from 'react'\r\nimport {io} from \"socket.io-client\"\r\n    import cookie from 'react-cookies'\r\nimport BanHammer from \"../assets/hammer.svg\"\r\nimport Axios from \"axios\"\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport CookieLaw from './CookieLaw'\r\nimport CreatePoll from \"./CreatePoll\"\r\nimport {address} from \"./serverAdress\"\r\nimport HostPoll from \"./HostPoll\"\r\n\r\n// import { set } from 'mongoose';\r\n\r\nexport default function Room(props) {\r\n\r\n    const [roomId] = useState(props.match.params.id);\r\n    const [data, setData]               = useState([])\r\n    const [message, setMessage]         = useState(\"\")\r\n    const [classList, setClassList]     = useState(\"\")\r\n    const [userToBan, setUserToBan]     = useState()\r\n    const [didPost, setDidPost]         = useState(false)\r\n\r\n    const [pollData, setPollData]       = useState()\r\n    const [pollTitle, setPollTitle]     = useState()\r\n    const [selected, setSelected]       = useState(-1)\r\n    const socketRef = useRef()\r\n\r\n\r\n    //socketio stuff\r\n\r\n    useEffect(() => {\r\n        //connect to the server\r\n        socketRef.current = io.connect(address) //hvad er .current?\r\n        \r\n\r\n        //sends on startup to validate a few things.\r\n        socketRef.current.emit(\"adminValidate\", {\r\n            password: cookie.load(\"adminPassword\" + roomId + \"\"),\r\n            roomId: roomId,\r\n        })\r\n        \r\n        //general messages.\r\n        socketRef.current.on(\"message\", ({success, msg}) => {\r\n            setMessage(msg)\r\n            setClassList(\"text-danger d-block\")\r\n        })\r\n\r\n\r\n        // on refresh/startup, get list from server.\r\n        socketRef.current.on(\"QuestionList\", ({ questionList }) => {\r\n\t\t\t\r\n            setData(questionList)\r\n\t\t});\r\n\r\n        //when recieve a single question emitted from client poster.\r\n        socketRef.current.on(\"SingleQuestion\", ({question, userId}) => {\r\n            let newQuestion = {\r\n                question: question,\r\n                userId: userId,\r\n            }\r\n            setData((oldArray) => [...oldArray, newQuestion])\r\n        });\r\n\r\n\r\n        //poll stuff\r\n\r\n        //creating this so i can re-use the socket id\r\n        socketRef.current.on(\"SendPoll\", (data) => {\r\n            setPollData(data.pollData)\r\n            if(data.selected !== undefined){\r\n                setSelected(data.selected)\r\n            }\r\n        })\r\n\r\n        //sends nothing to let server know to make server send poll to host.\r\n        let password = cookie.load(\"adminPassword\" + roomId + \"\")\r\n        \r\n       \r\n        socketRef.current.emit(\"setSocketIdHost\", {adminPassword: password})\r\n\r\n        socketRef.current.on(\"SendPollHost\", (data) => {\r\n           \r\n            setDidPost(true)\r\n            \r\n\r\n            if(data.pollData != undefined){\r\n                setPollData(data.pollData)\r\n                \r\n            }\r\n\r\n            if(data.selected != undefined){\r\n                setSelected(data.selected)\r\n            }\r\n\r\n            if(data.pollTitle != undefined){\r\n                setPollTitle(data.pollTitle)\r\n                \r\n            }\r\n        })\r\n\r\n        //in case device disconnects, such as when a phone leaves?/closes a browser or closing your laptop.\r\n        socketRef.current.on(\"disconnect\", () => {\r\n            window.location.reload(true)\r\n        })\r\n        \r\n    }, [])\r\n\r\n    \r\n    const handleBanClick = (id) => {\r\n        // do something related to a popup window here.\r\n        setUserToBan(id)\r\n        \r\n        handleShow()\r\n    }\r\n\r\n    const handleBan = () => {\r\n        handleClose()\r\n        \r\n        console.log(userToBan)\r\n        \r\n        Axios.post(address + \"/banuser/\", {\r\n            password: cookie.load(\"adminPassword\" + roomId + \"\"),\r\n            userId: userToBan,\r\n            roomId: roomId\r\n        }).then((response) =>{\r\n            console.log(response)\r\n            console.log(data)\r\n            \r\n            //im super lazy so just reset the thing instead of cleaning out the local array.\r\n            socketRef.current.emit(\"adminValidate\", {\r\n                password: cookie.load(\"adminPassword\" + roomId + \"\"),\r\n                roomId: roomId,\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (index) => {\r\n        \r\n        let password = cookie.load(\"adminPassword\" + roomId + \"\")\r\n        socketRef.current.emit(\"sendPollAnswerHost\", {choice: index, adminPassword: password})\r\n\r\n    }\r\n\r\n\r\n    \r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    \r\n    return (\r\n    <div className=\"container \" id=\"QuestionsContainer\">\r\n        <div className=\"container\">\r\n            <h3 className=\"pt-4 text-center \">Room Code: <u>{props.match.params.id}</u></h3>\r\n            \r\n            <div className=\"text-center w-md-50 m-auto\">\r\n                <span className={classList}>\r\n                    {message}\r\n                </span>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"container-fluid border-right p-4 col-12 col-md-8\">\r\n                    <h4 className=\" text-center m-auto\">Questions</h4>\r\n                    <p className=\"text-center\">\r\n                        View all questions, user ID's and shadowban.\r\n                    </p>    \r\n                    <table className=\"table table-striped table-bordered text-left customTable\">\r\n                        <tbody id=\"tableBody\">\r\n                            <tr>\r\n                                <th className=\"text-center\" width=\"50px\">#</th>\r\n                                <th className=\"text-center\" width=\"50px\">ID</th>\r\n                                <th className=\"px-3\">Question</th>\r\n                                <th className=\"text-center\" width=\"50px\">Ban</th>\r\n                            </tr>\r\n                            {data && data.map((question, index) => {\r\n                                return(\r\n                                    <tr key={index}>\r\n                                        <td className=\"text-center\"> {index + 1}</td>\r\n                                        <td className=\"text-center\">{question.userId}</td>\r\n                                        <td className=\"text-left px-3\">{question.question}</td>\r\n                                        <td onClick={() => handleBanClick(question.userId)} className=\"text-center\">\r\n                                            <div>\r\n                                                <img alt=\"ban user\" src={BanHammer}></img>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"container-fluid border-start p-4 col-12 col-md-4 order-first order-md-last\">\r\n                {\r\n                    !didPost \r\n                    ? <CreatePoll roomId={roomId} onPost={() => setDidPost(true)}/>\r\n                    : <HostPoll roomId={roomId} pollData={pollData} pollTitle={pollTitle} handleSubmit={handleSubmit} selected={selected}/>\r\n                }\r\n                </div>\r\n            </div>\r\n            \r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header>\r\n                    <Modal.Title>Ban user?</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Are you sure you want to ban user '{userToBan}'? You will not recieve any questions and the user will not be notified. <b>This cannot be undone.</b></Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={handleBan}>\r\n                        Confirm\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            \r\n            \r\n        </div>\r\n        <CookieLaw/>\r\n    </div>\r\n    \r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport \"../styles.css\"\r\nimport CookieLaw from './CookieLaw'\r\n\r\nexport default function ReadMore() {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container text-center\">\r\n\r\n        <a href=\"/\" id=\"\" className=\"alert-link\">Go back</a>\r\n            <h1 className=\"display-4\">What is Askaway?</h1>\r\n            <p className=\"readmoreText d-none d-sm-block\">\r\n                Askaway is a free to use service that lets you create your own room for everyone to ask you questions\r\n                anonymously. \r\n            </p>\r\n            <p className=\"d-sm-none\">\r\n                Askaway is a free to use service that lets you create your own room for everyone to ask you questions\r\n                anonymously. \r\n            </p>\r\n            <h5>\r\n                But why?\r\n            </h5>\r\n            <p className=\"readmoreText d-none d-sm-block\">\r\n                Say you're hosting a presentation or a conference. Instead of everyone having to interrupt you with their questions, \r\n                they just send them via Askaway, and you can easily view them whenever you see fit. This way they wont forget their questions, and those who are\r\n                uncomfortable speaking up can also ask.\r\n                 <br/><br/> Each person has their own unique ID, in case\r\n                anyone wants to be anonymous. <br/> <br/>\r\n                \r\n            </p>\r\n            <p className=\"d-sm-none\">\r\n            Say you're hosting a presentation or a conference. Instead of everyone having to interrupt you with their questions, \r\n                they just send them via Askaway, and you can easily view them whenever you see fit. This way they wont forget their questions, and those who are\r\n                uncomfortable speaking up can also ask.\r\n                 <br/><br/> Each person has their own unique ID, in case\r\n                anyone wants to be anonymous. <br/> <br/>\r\n            </p>\r\n\r\n\r\n            <h5>\r\n                What about spammers or trolls?\r\n            </h5>\r\n\r\n            <p className=\"readmoreText d-none d-sm-block\">\r\n\r\n                As a room host, you have the ability to shadowban people. This means you won't see any of their questions, and they won't know they're banned.\r\n                \r\n            </p>\r\n            <p className=\"d-sm-none\">\r\n                As a room host, you have the ability to shadowban people. This means you won't see any of their questions, and they won't know they're banned.\r\n            \r\n            </p>\r\n\r\n\r\n            <h5>\r\n                About the poll system\r\n            </h5>\r\n\r\n            <p className=\"readmoreText d-none d-sm-block\">\r\n\r\n                As a room host, you can create a polls for everyone, including yourself, in the room to anonymously vote in. \r\n                \r\n            </p>\r\n            <p className=\"d-sm-none\">\r\n            As a room host, you can create a polls for everyone, including yourself, in the room to anonymously vote in.\r\n            \r\n            </p>\r\n            <CookieLaw/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport ReCaptcha from \"react-google-recaptcha\"\r\nimport Axios from \"axios\"\r\nimport {address} from './serverAdress'\r\n\r\nexport default function Admin() {\r\n\r\n   \r\n\r\n    const [password, setPassword] = useState()\r\n    const [captchaValue, setCaptchaValue] = useState()\r\n    const [analData, setAnalData] = useState()\r\n    const [allowed, setAllowed] = useState()\r\n\r\n\r\n    const handleSubmit = () => {\r\n        Axios.post(address + \"/analytics\", {password: password, captcha: captchaValue} )\r\n        .then((response) => {\r\n            setAnalData(response.data.data)\r\n            setAllowed(response.data.success)\r\n            console.log(response.data)\r\n            resetCaptcha()\r\n        })\r\n    }\r\n\r\n    const handleCaptcha = (value) => {\r\n        setCaptchaValue(value)\r\n    }\r\n    \r\n    let captcha\r\n\r\n    const setCaptchaRef = (ref) => {\r\n        if(ref){\r\n            return captcha = ref;\r\n        }\r\n    }\r\n\r\n    const resetCaptcha = () => {\r\n        captcha.reset();\r\n    }\r\n\r\n    \r\n    const handleReset = (value) => {\r\n        // http://localhost:3001\r\n        // https://askawayapp.herokuapp.com\r\n        Axios.post(address + \"/resetAnal\", {password: password, captcha: captchaValue} )\r\n        .then((response) => {\r\n            \r\n            console.log(response.data)\r\n            setAnalData(\r\n                [   \r\n                    {\r\n                        questions: 0,\r\n                        rooms: 0,\r\n                        users: 0,\r\n                    }\r\n                ]\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n\t\t<div>\r\n         <ReCaptcha\r\n                        sitekey=\"6LdqX4saAAAAAC3Cie6ilnn6ujzvKuiMm2tjYeWG\"\r\n                        onChange={handleCaptcha}\r\n                        ref={(r) => setCaptchaRef(r)}\r\n                    /> \r\n                    \r\n            <input type=\"password\" placeholder=\"password\" onChange={(e) => setPassword(e.target.value)}>\r\n\r\n            </input>\r\n            <button onClick={handleSubmit}>\r\n                log in\r\n            </button>\r\n\r\n           {\r\n               allowed == true &&\r\n               <div>\r\n\r\n                    <h3>\r\n                        Total rooms: {analData[0].rooms}\r\n                    </h3>\r\n\r\n                    <h3>\r\n                        Total questions: {analData[0].questions}\r\n                    </h3>\r\n                    <h3>\r\n                        Total users: {analData[0].users}\r\n                    </h3>\r\n\r\n                    <h3>\r\n                        -------------------\r\n                    </h3>\r\n\r\n                    <h3>\r\n                        Average questions per room: {(analData[0].questions / analData[0].rooms).toFixed(2)}\r\n                    </h3>\r\n                    <h3>\r\n                        Average users per room: {(analData[0].users / analData[0].rooms).toFixed(2)}\r\n                    </h3>\r\n                    <h3>\r\n                        Average questions per user: {(analData[0].questions / analData[0].users).toFixed(2)}\r\n                    </h3>\r\n                    \r\n\r\n                  \r\n                    <button onClick={handleReset}>\r\n                    Reset stats\r\n                    </button>\r\n               </div>\r\n           }\r\n            \r\n\t\t</div>\r\n\t);\r\n}","import React from \"react\"\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport Home from \"./components/Home\"\r\nimport Room from \"./components/Room\"\r\nimport Host from \"./components/Host\"\r\nimport ReadMore from \"./components/ReadMore\"\r\nimport Analytics from \"./components/Analytics\"\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route path=\"/room/:id\" component={Room}/>\r\n            <Route path=\"/host/:id\" component={Host}/>\r\n            <Route path=\"/readmore/\" component={ReadMore}/>\r\n            <Route path=\"/admin/\" component={Analytics}/>\r\n        </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n        <App />\n\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","\r\nlet online = true;\r\n\r\nconst address = {\r\n    address: \"asd\"\r\n}\r\n\r\nif(online){\r\n    address.address = \"https://askawayapp.herokuapp.com\"\r\n}\r\nelse{\r\n    address.address = \"http://localhost:3001\"\r\n}\r\nmodule.exports = address"],"sourceRoot":""}