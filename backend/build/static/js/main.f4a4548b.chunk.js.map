{"version":3,"sources":["components/PreviousRoom.js","components/Home.js","components/Room.js","assets/hammer.svg","components/Host.js","components/ReadMore.js","App.js","index.js"],"names":["PreviousRoom","prevRoomCookie","history","useHistory","useState","data","setData","useEffect","undefined","cookie","load","className","onClick","handleJoin","push","Home","inputValue","setInputValue","createText","setCreateText","joinText","setJoinText","captchaValue","setCaptchaValue","captchaWarning","setCaptchaWarning","listener","event","code","preventDefault","document","addEventListener","removeEventListener","existingPassword","Axios","post","captcha","room","then","response","success","msg","window","location","reload","console","log","newPassword","d","Date","time","getTime","roomId","userId","href","id","onChange","e","target","value","toUpperCase","type","placeholder","name","sitekey","roomCreated","adminPassword","Room","props","match","params","setUserId","message","setMessage","classList","setClassList","canPost","setCanPost","handlePost","socketRef","useRef","current","io","connect","on","setTimeout","password","emit","question","rows","maxLength","aria-label","aria-describedby","userToBan","setUserToBan","questionList","newQuestion","oldArray","show","setShow","handleClose","handleShow","width","map","index","alt","src","BanHammer","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","ReadMore","App","exact","path","component","Host","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4a4548b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport cookie from 'react-cookies'\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nexport default function PreviousRoom() {\r\n    let history = useHistory();\r\n    let prevRoomCookie\r\n    const [data, setData] = useState()\r\n    \r\n    \r\n    useEffect(() => {\r\n        prevRoomCookie = cookie.load(\"PreviousRoom\")\r\n        if(prevRoomCookie === undefined){\r\n            return null\r\n        }\r\n        else{\r\n            setData(\r\n                <div>\r\n                    <div className=\"container\">\r\n                        <p className=\"mt-4 mb-0\">\r\n                            It looks like you already created room {prevRoomCookie}\r\n                        </p>\r\n                        <button onClick={handleJoin} className=\"btn btn-link alert-link\">Join {prevRoomCookie}</button>\r\n           \r\n                    </div>\r\n                </div>\r\n            )\r\n            return ( //where does this return to?\r\n                <div className=\"bg-danger\">\r\n                    ass\r\n                </div>\r\n            )\r\n        }\r\n    }, [])\r\n\r\n    const handleJoin = () => {\r\n        history.push(\"/host/\" + prevRoomCookie + \"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {data}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Axios from \"axios\"\r\nimport ReCaptcha from \"react-google-recaptcha\"\r\nimport cookie from 'react-cookies'\r\nimport PreviousRoom from \"./PreviousRoom\"\r\n\r\nexport default function Home() {\r\n    let history = useHistory();\r\n\r\n    const [inputValue, setInputValue] = useState()\r\n    const [createText, setCreateText] = useState(\"Or create a room...\")\r\n    const [joinText, setJoinText] = useState(\"Join\")\r\n    const [captchaValue, setCaptchaValue] = useState()\r\n    const [captchaWarning, setCaptchaWarning] = useState()\r\n\r\n    \r\n\r\n    //this entire thing is just for clicking enter to fire a function\r\n    useEffect(() => {\r\n        const listener = event => {\r\n            if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\r\n                event.preventDefault();\r\n                handleJoin()\r\n            }\r\n        };\r\n        document.addEventListener(\"keydown\", listener);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", listener);\r\n        };\r\n    },)\r\n\r\n    const handleChange = (target) => {\r\n        setInputValue(target.toUpperCase())\r\n    }\r\n\r\n    const handleCreate = () => {\r\n        setCreateText(\"Loading...\")\r\n\r\n        Axios.post(\"http://localhost:3001/createroom\", { captcha: captchaValue, })\r\n            .then((response) => {\r\n                if (response.data.success === false) {\r\n                    setCaptchaWarning(response.data.msg)\r\n                    console.log(response.data)\r\n                    setCreateText(\"Or create a room...  \")\r\n\r\n\r\n                      //shitty workaround that reloads page if you stumble upon this bug. because their docs suck ass.\r\n                    if(captchaValue == \"ass\"){\r\n                        window.location.reload()\r\n                    }\r\n                }\r\n                setCaptchaValue(\"ass\")\r\n                \r\n                if (response.data.roomCreated === true) {\r\n                    let d = new Date();\r\n                    let time = d.getTime()\r\n                    let tomorrow = time + 86400000 // + 24 hours\r\n                    d = new Date(tomorrow);\r\n\r\n                    document.cookie = \"adminPassword\" + response.data.roomId + \"=\" + response.data.adminPassword + \"; expires=\" + d + \"\"\r\n                    document.cookie = \"PreviousRoom=\" + response.data.roomId + \"; expires=\" + d + \"\"\r\n                    history.push(\"/host/\" + response.data.roomId + \"\")\r\n\r\n                }\r\n                console.log(response.data)\r\n\r\n\r\n                //redirect to subpage todo\r\n            })\r\n    }\r\n\r\n    const handleJoin = () => {\r\n        setJoinText(\"Loading...\");\r\n        let existingPassword = cookie.load(\"userPassword\" + inputValue + \"\");\r\n        // console.log(existingPassword)\r\n        Axios.post(\"http://localhost:3001/joinroom\", { captcha: captchaValue, existingPassword: existingPassword, room: inputValue })\r\n            .then((response) => {\r\n                \r\n                if (response.data.success === false) {\r\n                    setCaptchaWarning(response.data.msg)\r\n                    setJoinText(\"Join\")\r\n                    \r\n                    //shitty workaround that reloads page if you stumble upon this bug. because their docs suck ass.\r\n                    if(captchaValue == \"ass\"){\r\n                        window.location.reload()\r\n                    }\r\n                    \r\n                }\r\n                setCaptchaValue(\"ass\")\r\n                console.log(response.data)\r\n                if (response.data.newPassword !== undefined) { //this runs if user sent wrong or no password\r\n                    let d = new Date();\r\n                    let time = d.getTime()\r\n                    let tomorrow = time + 86400000 // + 24 hours\r\n                    d = new Date(tomorrow);\r\n\r\n                    document.cookie = \"userPassword\" + response.data.roomId + \"=\" + response.data.newPassword + \"; expires=\" + d + \"\"\r\n                    document.cookie = \"userId\" + response.data.roomId + \"=\" + response.data.userId + \"; expires=\" + d + \"\"\r\n                }\r\n                if (response.data.success === true) {\r\n                    history.push(\"/room/\" + response.data.roomId + \"\")\r\n                }\r\n\r\n\r\n            })\r\n    }\r\n\r\n    //save captcha value to post into server\r\n    const handleCaptcha = (value) => {\r\n        setCaptchaValue(value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container text-center \">\r\n            <div className=\"container pb-4\">\r\n                <h1 className=\"display-3 d-none d-sm-inline text-wrap\">Askaway</h1>\r\n                <h1 className=\"display-4 d-sm-none text-wrap\">Askaway</h1>\r\n\r\n                <h4 className=\"\">The free service that lets you ask anonymous questions live.</h4>\r\n                <a href=\"readmore\" id=\"\" className=\"alert-link\">Read more</a>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            <div className=\"container w-sm-50\">\r\n                <input onChange={(e) => handleChange(e.target.value)} value={inputValue} id=\"codeInput\" className=\"form-control text-center customInput\" type=\"text\" placeholder=\"Type room code here to join\" name=\"askawayInput\" />\r\n\r\n                <div className=\"container d-flex flex-wrap justify-content-center mt-4\">\r\n                    <ReCaptcha\r\n                        sitekey=\"6LdqX4saAAAAAC3Cie6ilnn6ujzvKuiMm2tjYeWG\"\r\n                        onChange={handleCaptcha}\r\n                        \r\n                    /> \r\n\r\n                </div>\r\n                <span className=\"text-danger d-block\">\r\n                    {captchaWarning}\r\n                </span>\r\n\r\n                <button onClick={handleJoin} className=\" btn btn-primary px-4 m-4 customButton\">{joinText}</button>\r\n\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                {/* <Link to={\"/room/\" + }> */}\r\n                <button onClick={handleCreate} className=\"btn btn-link alert-link \">{createText}</button>\r\n                {/* </Link> */}\r\n            </div>\r\n\r\n            <PreviousRoom />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react'\r\nimport cookie from 'react-cookies'  \r\nimport {io} from \"socket.io-client\"\r\n\r\n//as soon as i load the room, check for user and admin password. do server calls dependant on which one i find.\r\n//user only posts, admin can also request from server.\r\nexport default function Room(props) {\r\n\r\n    const [roomId] = useState(props.match.params.id);\r\n    const [userId, setUserId] = useState()\r\n    const [message, setMessage] = useState(\"\")\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [classList, setClassList] = useState(\"\")\r\n    const [canPost, setCanPost] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setUserId(cookie.load(\"userId\" + roomId + \"\"))\r\n        console.log(props)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const listener = event => {\r\n            if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\r\n                event.preventDefault();\r\n                handlePost()\r\n            }\r\n        };\r\n        document.addEventListener(\"keydown\", listener);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", listener);\r\n        };\r\n    },)\r\n\r\n\r\n    //socketio stuff\r\n    const socketRef = useRef()\r\n\r\n    useEffect(() => {\r\n\t\t//connect to the server\r\n\t\tsocketRef.current = io.connect(\"http://localhost:3001\"); \r\n\t\t// socketRef.current.emit\r\n\t\tsocketRef.current.on(\"RoomMessage\", ({ msg, success }) => {\r\n\t\t\tif (success === false) {\r\n                setClassList(\"text-danger d-block\")\r\n\t\t\t\tsetMessage(msg);\r\n\t\t\t} else {\r\n                setInputValue(\"\");\r\n                setClassList(\"text-primary d-block\")\r\n                setMessage(msg)\r\n            }\r\n            console.log(success, msg)\r\n\t\t});\r\n\t}, [])\r\n\r\n\r\n\r\n    const handlePost = () => {\r\n        \r\n        if(canPost) {\r\n\r\n            setCanPost(false)\r\n\r\n            //set timer\r\n            setTimeout(() =>{\r\n\r\n                setCanPost(true)\r\n            }, 3000)\r\n        }\r\n        else{\r\n            setClassList(\"text-danger d-block\")\r\n\t\t\t\tsetMessage(\"You can't post more than once every 3 seconds.\");\r\n                return\r\n        }\r\n       \r\n\r\n        let password = cookie.load(\"userPassword\" + roomId + \"\")\r\n        console.log(password)\r\n        socketRef.current.emit(\"postQuestion\", {password: password, roomId: roomId, question: inputValue })\r\n\r\n       \r\n\r\n        // Axios.post(\"http://localhost:3001/postquestion/\", {password: password, roomId: roomId, question: inputValue })\r\n        // .then((response) =>{\r\n        //     console.log(response.data)\r\n        //     if(response.data.success === false){\r\n        //         setMessage(response.data.msg)\r\n        //     }\r\n        //     else{\r\n        //         setInputValue(\"\")\r\n        //     }\r\n        // })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container text-center\" id=\"QuestionsContainer\">\r\n        <div className=\"container\">\r\n            <h3 className=\"pt-4\">Room Code: {roomId}</h3>\r\n            <h4 className=\"pb-4\">Your ID: {userId}</h4>\r\n            <textarea onChange={(e) => setInputValue(e.target.value)} value={inputValue} type=\"text\" rows=\"5\" maxLength=\"200\" className=\"customInput form-control \" placeholder=\"Type your question here\" aria-label=\"\" aria-describedby=\"basic-addon1>\"  />\r\n            \r\n            <span className={classList}>\r\n                {message}\r\n            </span>\r\n\r\n            <button onClick={handlePost} id=\"btnAskQuestion\" className=\"btn btn-outline-primary mt-3 px-4\" type=\"button\">Ask away!</button>\r\n           \r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/hammer.a1387783.svg\";","import React, {useState, useEffect, useRef} from 'react'\r\nimport {io} from \"socket.io-client\"\r\nimport cookie from 'react-cookies'\r\nimport BanHammer from \"../assets/hammer.svg\"\r\nimport Axios from \"axios\"\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\n// import { set } from 'mongoose';\r\n\r\nexport default function Room(props) {\r\n\r\n    const [roomId] = useState(props.match.params.id);\r\n    const [data, setData] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const [classList, setClassList] = useState(\"\")\r\n    const [userToBan, setUserToBan] = useState()\r\n    \r\n    const socketRef = useRef()\r\n\r\n\r\n    //socketio stuff\r\n\r\n    useEffect(() => {\r\n        //connect to the server\r\n        socketRef.current = io.connect(\"http://localhost:3001\") //hvad er .current?\r\n        \r\n\r\n        //sends on startup to validate a few things.\r\n        socketRef.current.emit(\"adminValidate\", {\r\n            password: cookie.load(\"adminPassword\" + roomId + \"\"),\r\n            roomId: roomId,\r\n        })\r\n        \r\n        //general messages.\r\n        socketRef.current.on(\"message\", ({success, msg}) => {\r\n            setMessage(msg)\r\n            setClassList(\"text-danger d-block\")\r\n        })\r\n\r\n\r\n        // on refresh/startup, get list from server.\r\n        socketRef.current.on(\"QuestionList\", ({ questionList }) => {\r\n\t\t\t\r\n            console.log(questionList)\r\n            setData(questionList)\r\n\t\t});\r\n\r\n        //when recieve a single question emitted from client poster.\r\n        socketRef.current.on(\"SingleQuestion\", ({question, userId}) => {\r\n            let newQuestion = {\r\n                question: question,\r\n                userId: userId,\r\n            }\r\n            setData((oldArray) => [...oldArray, newQuestion])\r\n        });\r\n        \r\n    }, [])\r\n\r\n    \r\n    const handleBanClick = (id) => {\r\n        // do something related to a popup window here.\r\n        setUserToBan(id)\r\n        \r\n        handleShow()\r\n    }\r\n\r\n    const handleBan = () => {\r\n        handleClose()\r\n        \r\n        console.log(userToBan)\r\n        \r\n        Axios.post(\"http://localhost:3001/banuser/\", {\r\n            password: cookie.load(\"adminPassword\" + roomId + \"\"),\r\n            userId: userToBan,\r\n            roomId: roomId\r\n        }).then((response) =>{\r\n            console.log(response)\r\n            console.log(data)\r\n            \r\n            //im super lazy so just reset the thing instead of cleaning out the local array.\r\n            socketRef.current.emit(\"adminValidate\", {\r\n                password: cookie.load(\"adminPassword\" + roomId + \"\"),\r\n                roomId: roomId,\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    \r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    \r\n    return (\r\n        <div className=\"container \" id=\"QuestionsContainer\">\r\n        <div className=\"container\">\r\n            <h3 className=\"pt-4 text-center \">Room Code: {props.match.params.id}</h3>\r\n            <table className=\"table table-striped table-bordered text-left customTable\">\r\n                <tbody id=\"tableBody\">\r\n                    <tr>\r\n                        <th className=\"text-center\"width=\"50px\">#</th>\r\n                        <th className=\"text-center\" width=\"50px\">ID</th>\r\n                        <th className=\"px-3\">Question</th>\r\n                        <th className=\"text-center\" width=\"50px\">Ban</th>\r\n                    </tr>\r\n                    {data && data.map((question, index) => {\r\n                        return(\r\n                            <tr key={index}>\r\n                                <td className=\"text-center\"> {index + 1}</td>\r\n                                <td className=\"text-center\">{question.userId}</td>\r\n                                <td className=\"text-left px-3\">{question.question}</td>\r\n                                <td onClick={() => handleBanClick(question.userId)} className=\"text-center\">\r\n                                    <div>\r\n                                        <img alt=\"ban user\" src={BanHammer}></img>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className=\"text-center\">\r\n                <span className={classList}>\r\n                    {message}\r\n                </span>\r\n            </div>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Ban user?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you sure you want to ban user '{userToBan}'? You will not recieve any questions and the user will not be notified. <b>This cannot be undone.</b></Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={handleBan}>\r\n            Confirm\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport \"../styles.css\"\r\n\r\nexport default function ReadMore() {\r\n    return (\r\n        <div className=\"container text-center\">\r\n            <h1 className=\"display-4\">What is Askaway?</h1>\r\n            <p className=\"readmoreText d-none d-sm-block\">\r\n                Askaway is a free to use service that lets you create your own room for everyone to ask you questions\r\n                anonymously. \r\n            </p>\r\n            <p className=\"d-sm-none\">\r\n                Askaway is a free to use service that lets you create your own room for everyone to ask you questions\r\n                anonymously. \r\n            </p>\r\n            <h5>\r\n                But why?\r\n            </h5>\r\n            <p className=\"readmoreText d-none d-sm-block\">\r\n                Say you're hosting a presentation or a conference. Instead of everyone having to interrupt you with their questions, \r\n                they just send them via Askaway, and you can easily view them whenever you see fit. This way they wont forget their questions, and those who are\r\n                uncomfortable speaking up can also ask.\r\n                 <br/><br/> Each person has their own unique ID, in case\r\n                anyone wants to be anonymous. <br/> <br/>\r\n                \r\n            </p>\r\n            <p className=\"d-sm-none\">\r\n            Say you're hosting a presentation or a conference. Instead of everyone having to interrupt you with their questions, \r\n                they just send them via Askaway, and you can easily view them whenever you see fit. This way they wont forget their questions, and those who are\r\n                uncomfortable speaking up can also ask.\r\n                 <br/><br/> Each person has their own unique ID, in case\r\n                anyone wants to be anonymous. <br/> <br/>\r\n            </p>\r\n\r\n\r\n            <h5>\r\n                What about spammers or trolls?\r\n            </h5>\r\n\r\n            <p className=\"readmoreText d-none d-sm-block\">\r\n\r\n                As a room host, you have the ability to shadowban people. This means you won't see any of their questions, and they won't know they're banned.\r\n                \r\n            </p>\r\n            <p className=\"d-sm-none\">\r\n            \r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport Home from \"./components/Home\"\r\nimport Room from \"./components/Room\"\r\nimport Host from \"./components/Host\"\r\nimport ReadMore from \"./components/ReadMore\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route path=\"/room/:id\" component={Room}/>\r\n            <Route path=\"/host/:id\" component={Host}/>\r\n            <Route path=\"/readmore/\" component={ReadMore}/>\r\n        </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n        <App />\r\n\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}